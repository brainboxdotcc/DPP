name: D++ CI
on: [push, pull_request]

jobs:
  linux-x64:
    name: Linux x64 (${{matrix.cfg.cpp-version}})
    runs-on: ${{matrix.cfg.os}}
    strategy:
      fail-fast: false # Don't fail everything if one fails. We want to test each OS/Compiler individually
      matrix:
        cfg:
          - { os: ubuntu-20.04, cpp-version: g++-8 }
          - { os: ubuntu-20.04, cpp-version: g++-9 }
          - { os: ubuntu-20.04, cpp-version: clang-7 }
          - { os: ubuntu-20.04, cpp-version: clang-8 }
          - { os: ubuntu-20.04, cpp-version: clang-9 }

    steps:
      - name: Checkout Etterna
        uses: actions/checkout@v2

      - name: Install apt packages
        run: sudo apt update && sudo apt install ${{ matrix.cfg.cpp-version }} ninja-build libsodium-dev libopus-dev zlib1g-dev

      - name: Generate CMake
        run: mkdir build && cd build && cmake -G Ninja ..
        env:
          CXX: ${{matrix.cfg.cpp-version}}

      - name: Build Project
        run: cd build && ninja

      - name: Package distributable
        if: ${{ matrix.cfg.cpp-version == 'clang-9' }}
        run: cd build && cpack

      - name: Upload Binary
        if: ${{ matrix.cfg.cpp-version == 'clang-9' }}
        uses: actions/upload-artifact@v2
        with:
          name: "libdpp - Debian Package ${{matrix.cfg.name}}"
          path: '${{github.workspace}}/build/*.deb'

  windows: # Windows x64 and x86 build matrix
    strategy:
      fail-fast: false # Don't cancel other matrix jobs if one fails
      matrix:
        cfg:
        - { name: x64,  arch: x64,   ssl-dir: 'C:\Program Files\OpenSSL-Win64'}

    name: "Windows ${{matrix.cfg.name}}"
    runs-on: windows-2019
    steps:
      - name: Checkout D++
        uses: actions/checkout@v2
        with:
          path: main

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Install chocolatey packages (x64)
        run: choco install ninja openssl -y

      - name: Generate CMake
        run: mkdir main/build && cd main/build && cmake -G "Visual Studio 16 2019" -DOPENSSL_ROOT_DIR="${{matrix.cfg.ssl-dir}}" ..

      - name: Build Project
        run: cmake --build main/build --target libdpp --config Release

      - name: Package distributable
        run: cd main/build && cpack

  macos:
    name: macOS x64
    runs-on: macos-latest
    steps:
      - name: Checkout D++
        uses: actions/checkout@v2

      - name: Install homebrew packages
        run: brew install cmake ninja libsodium opus

      - name: Generate CMake
        run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -G Ninja ..

      - name: Build Project
        run: cd build && ninja
